{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\epslk\\\\Documents\\\\GitHub\\\\Simple_HTMLStudyWeb\\\\src\\\\post\\\\PagePost.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst markdownFiles = [{\n  name: \"카테고리1\",\n  type: \"folder\",\n  posts: [{\n    id: 1,\n    name: \"대학공부\",\n    type: \"file\"\n  }, {\n    id: 2,\n    name: \"유니티\",\n    type: \"file\"\n  }]\n}, {\n  name: \"카테고리2\",\n  type: \"folder\",\n  posts: [{\n    id: 3,\n    name: \"자바스크립트\",\n    type: \"file\"\n  }, {\n    id: 4,\n    name: \"리액트\",\n    type: \"file\"\n  }]\n}];\nconst PagePost = () => {\n  _s();\n  const {\n    categoryName\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // URL의 categoryName을 기반으로 데이터 로드\n    const selectedCategoryObj = markdownFiles.find(category => category.name === categoryName);\n    if (selectedCategoryObj) {\n      setPosts(selectedCategoryObj.posts);\n    }\n  }, [categoryName]); // categoryName이 변경될 때마다 useEffect가 실행됩니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [categoryName, \" \\uD3EC\\uC2A4\\uD2B8 \\uBAA9\\uB85D\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/blog/${categoryName}/${post.name}`,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uD3EC\\uC2A4\\uD2B8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(PagePost, \"HCoTylxnRWnfNUMt2ywdAjaEfwg=\", false, function () {\n  return [useParams];\n});\n_c = PagePost;\nexport default PagePost;\nvar _c;\n$RefreshReg$(_c, \"PagePost\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","jsxDEV","_jsxDEV","markdownFiles","name","type","posts","id","PagePost","_s","categoryName","setPosts","selectedCategoryObj","find","category","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","to","_c","$RefreshReg$"],"sources":["C:/Users/epslk/Documents/GitHub/Simple_HTMLStudyWeb/src/post/PagePost.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nconst markdownFiles = [\r\n  {\r\n    name: \"카테고리1\", type: \"folder\",\r\n    posts: [\r\n      { id: 1, name: \"대학공부\", type: \"file\" }, \r\n      { id: 2, name: \"유니티\", type: \"file\" }\r\n    ]\r\n  },\r\n  {\r\n    name: \"카테고리2\", type: \"folder\",\r\n    posts: [\r\n      { id: 3, name: \"자바스크립트\", type: \"file\" }, \r\n      { id: 4, name: \"리액트\", type: \"file\" }\r\n    ]\r\n  }\r\n];\r\n\r\nconst PagePost = () => {\r\n  const { categoryName } = useParams();\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // URL의 categoryName을 기반으로 데이터 로드\r\n    const selectedCategoryObj = markdownFiles.find(category => category.name === categoryName);\r\n\r\n    if (selectedCategoryObj) {\r\n      setPosts(selectedCategoryObj.posts);\r\n    }\r\n  }, [categoryName]); // categoryName이 변경될 때마다 useEffect가 실행됩니다.\r\n\r\n  return (\r\n    <div>\r\n      <h2>{categoryName} 포스트 목록</h2>\r\n      {posts.length > 0 ? (\r\n        posts.map(post => (\r\n          <div key={post.id}>\r\n            <Link to={`/blog/${categoryName}/${post.name}`}>\r\n              <h4>{post.name}</h4>\r\n            </Link>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div>포스트가 없습니다.</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PagePost;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAG,CACpB;EACEC,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE,QAAQ;EAC7BC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAO,CAAC,EACrC;IAAEE,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAO,CAAC;AAExC,CAAC,EACD;EACED,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE,QAAQ;EAC7BC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvC;IAAEE,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAO,CAAC;AAExC,CAAC,CACF;AAED,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAa,CAAC,GAAGX,SAAS,CAAC,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEK,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,mBAAmB,GAAGT,aAAa,CAACU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACV,IAAI,KAAKM,YAAY,CAAC;IAE1F,IAAIE,mBAAmB,EAAE;MACvBD,QAAQ,CAACC,mBAAmB,CAACN,KAAK,CAAC;IACrC;EACF,CAAC,EAAE,CAACI,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpB,oBACER,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,GAAKL,YAAY,EAAC,kCAAO;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7Bb,KAAK,CAACc,MAAM,GAAG,CAAC,GACfd,KAAK,CAACe,GAAG,CAACC,IAAI,iBACZpB,OAAA;MAAAa,QAAA,eACEb,OAAA,CAACF,IAAI;QAACuB,EAAE,EAAE,SAASb,YAAY,IAAIY,IAAI,CAAClB,IAAI,EAAG;QAAAW,QAAA,eAC7Cb,OAAA;UAAAa,QAAA,EAAKO,IAAI,CAAClB;QAAI;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB;IAAC,GAHCG,IAAI,CAACf,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIZ,CACN,CAAC,gBAEFjB,OAAA;MAAAa,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACrB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACV,EAAA,CA7BID,QAAQ;EAAA,QACaT,SAAS;AAAA;AAAAyB,EAAA,GAD9BhB,QAAQ;AA+Bd,eAAeA,QAAQ;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}