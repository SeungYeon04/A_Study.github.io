{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\epslk\\\\Documents\\\\GitHub\\\\Simple_HTMLStudyWeb\\\\src\\\\post\\\\PagePost.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post() {\n  const Files = [{\n    name: \"글1\",\n    content: \"내용1\"\n  }, {\n    name: \"유니티\",\n    content: \"내용2\"\n  }]; //여기 자동으로 카테고리, 이름 찾게 할 거임 \n\n  //카테고리 구현에 필요한\n  const markdownFiles = [{\n    name: \"카테고리1\",\n    post: [{\n      name: \"대학공부\",\n      content: \"내용1\"\n    }, {\n      name: \"유니티\",\n      content: \"내용2\"\n    }]\n  }, {\n    name: \"카테고리\",\n    post: [{\n      name: \"대학공부\",\n      content: \"내용1\"\n    }, {\n      name: \"유니티\",\n      content: \"내용2\"\n    }]\n  }];\n  //페이지 데이터 받아서 글자 출력  \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAE00 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), markdownFiles.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: category.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: category.posts.map((post, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/blog/${category.name}/${post.name}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: post.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: post.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 1\n  }, this);\n}\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","Post","Files","name","content","markdownFiles","post","children","fileName","_jsxFileName","lineNumber","columnNumber","map","category","index","posts","idx","to","_c","$RefreshReg$"],"sources":["C:/Users/epslk/Documents/GitHub/Simple_HTMLStudyWeb/src/post/PagePost.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\"; \r\n\r\nexport default function Post() {\r\n  const Files = [\r\n    { name: \"글1\", content: \"내용1\" }, \r\n    { name: \"유니티\", content: \"내용2\" }\r\n  ]; //여기 자동으로 카테고리, 이름 찾게 할 거임 \r\n\r\n  //카테고리 구현에 필요한\r\n  const markdownFiles = [\r\n    {name : \"카테고리1\", post :[\r\n    { name: \"대학공부\", content: \"내용1\" }, \r\n    { name: \"유니티\", content: \"내용2\" }\r\n    ]},\r\n    {name : \"카테고리\", post :[\r\n      { name: \"대학공부\", content: \"내용1\" }, \r\n      { name: \"유니티\", content: \"내용2\" }\r\n      ]}\r\n  ]\r\n  //페이지 데이터 받아서 글자 출력  \r\n  return (\r\n<div>\r\n      <h2>글 목록</h2>\r\n      {markdownFiles.map((category, index) => (\r\n        <div key={index}>\r\n          <h3>{category.name}</h3>\r\n          <ul>\r\n            {category.posts.map((post, idx) => (\r\n              <li key={idx}>\r\n                <Link to={`/blog/${category.name}/${post.name}`}>\r\n                  <h4>{post.name}</h4>\r\n                  <p>{post.content}</p>\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,IAAIA,CAAA,EAAG;EAC7B,MAAMC,KAAK,GAAG,CACZ;IAAEC,IAAI,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAM,CAAC,EAC9B;IAAED,IAAI,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAM,CAAC,CAChC,CAAC,CAAC;;EAEH;EACA,MAAMC,aAAa,GAAG,CACpB;IAACF,IAAI,EAAG,OAAO;IAAEG,IAAI,EAAE,CACvB;MAAEH,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAM,CAAC,EAChC;MAAED,IAAI,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAM,CAAC;EAC9B,CAAC,EACF;IAACD,IAAI,EAAG,MAAM;IAAEG,IAAI,EAAE,CACpB;MAAEH,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAM,CAAC,EAChC;MAAED,IAAI,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAM,CAAC;EAC9B,CAAC,CACL;EACD;EACA,oBACFJ,OAAA;IAAAO,QAAA,gBACMP,OAAA;MAAAO,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACZN,aAAa,CAACO,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACjCd,OAAA;MAAAO,QAAA,gBACEP,OAAA;QAAAO,QAAA,EAAKM,QAAQ,CAACV;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxBX,OAAA;QAAAO,QAAA,EACGM,QAAQ,CAACE,KAAK,CAACH,GAAG,CAAC,CAACN,IAAI,EAAEU,GAAG,kBAC5BhB,OAAA;UAAAO,QAAA,eACEP,OAAA,CAACF,IAAI;YAACmB,EAAE,EAAE,SAASJ,QAAQ,CAACV,IAAI,IAAIG,IAAI,CAACH,IAAI,EAAG;YAAAI,QAAA,gBAC9CP,OAAA;cAAAO,QAAA,EAAKD,IAAI,CAACH;YAAI;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpBX,OAAA;cAAAO,QAAA,EAAID,IAAI,CAACF;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB;QAAC,GAJAK,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA,GAXGG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACO,EAAA,GAtCuBjB,IAAI;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}