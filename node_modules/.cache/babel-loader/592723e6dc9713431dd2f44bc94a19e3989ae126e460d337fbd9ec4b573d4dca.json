{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\epslk\\\\Documents\\\\GitHub\\\\Simple_HTMLStudyWeb\\\\src\\\\post\\\\PageCategory.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Post from './PagePost'; // Post 컴포넌트를 가져옴\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst markdownFiles = [{\n  name: \"카테고리1\",\n  type: \"folder\",\n  posts: [{\n    id: 1,\n    name: \"대학공부\",\n    type: \"file\"\n  }, {\n    id: 2,\n    name: \"유니티\",\n    type: \"file\"\n  }]\n}, {\n  name: \"카테고리2\",\n  type: \"folder\",\n  posts: [{\n    id: 3,\n    name: \"자바스크립트\",\n    type: \"file\"\n  }, {\n    id: 4,\n    name: \"리액트\",\n    type: \"file\"\n  }]\n}];\nconst Category = () => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const {\n    categoryName\n  } = useParams(); // React Router의 useParams 훅을 사용하여 URL 파라미터 값을 가져옴\n\n  // 카테고리 이름을 클릭했을 때 상태 업데이트\n  const handleClickCategory = categoryName => {\n    setSelectedCategory(categoryName);\n  };\n\n  // 선택된 카테고리 객체 찾기\n  const selectedCategoryObj = markdownFiles.find(category => category.name === categoryName);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [markdownFiles.map((category, index) => category.type === 'folder' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/blog/${category.name}`,\n          onClick: () => handleClickCategory(category.name),\n          children: category.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(Post, {\n      selectedCategoryObj: selectedCategoryObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Category, \"Q6vatJWDuVGSnV7xy1hJ2LBLTbk=\", false, function () {\n  return [useParams];\n});\n_c = Category;\nexport default Category;\nvar _c;\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"names":["React","useState","Link","useParams","Post","jsxDEV","_jsxDEV","markdownFiles","name","type","posts","id","Category","_s","selectedCategory","setSelectedCategory","categoryName","handleClickCategory","selectedCategoryObj","find","category","children","map","index","to","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/epslk/Documents/GitHub/Simple_HTMLStudyWeb/src/post/PageCategory.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Post from './PagePost'; // Post 컴포넌트를 가져옴\r\n\r\nconst markdownFiles = [\r\n  {\r\n    name: \"카테고리1\", type: \"folder\",\r\n    posts: [\r\n      { id: 1, name: \"대학공부\", type: \"file\" }, \r\n      { id: 2, name: \"유니티\", type: \"file\" }\r\n    ]\r\n  },\r\n  {\r\n    name: \"카테고리2\", type: \"folder\",\r\n    posts: [\r\n      { id: 3, name: \"자바스크립트\", type: \"file\" }, \r\n      { id: 4, name: \"리액트\", type: \"file\" }\r\n    ]\r\n  }\r\n];\r\n\r\nconst Category = () => {\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const { categoryName } = useParams(); // React Router의 useParams 훅을 사용하여 URL 파라미터 값을 가져옴\r\n\r\n  // 카테고리 이름을 클릭했을 때 상태 업데이트\r\n  const handleClickCategory = (categoryName) => {\r\n    setSelectedCategory(categoryName);\r\n  };\r\n\r\n  // 선택된 카테고리 객체 찾기\r\n  const selectedCategoryObj = markdownFiles.find(category => category.name === categoryName);\r\n\r\n  return (\r\n    <div>\r\n      {markdownFiles.map((category, index) => (\r\n        category.type === 'folder' && (\r\n          <div key={index}>\r\n            <h3>\r\n              <Link to={`/blog/${category.name}`} onClick={() => handleClickCategory(category.name)}>\r\n                {category.name}\r\n              </Link>\r\n            </h3>\r\n          </div>\r\n        )\r\n      ))}\r\n      {/* Post 컴포넌트에 선택된 카테고리 정보 전달 */}\r\n      <Post selectedCategoryObj={selectedCategoryObj} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,IAAI,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,aAAa,GAAG,CACpB;EACEC,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE,QAAQ;EAC7BC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAO,CAAC,EACrC;IAAEE,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAO,CAAC;AAExC,CAAC,EACD;EACED,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE,QAAQ;EAC7BC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvC;IAAEE,EAAE,EAAE,CAAC;IAAEH,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAO,CAAC;AAExC,CAAC,CACF;AAED,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM;IAAEe;EAAa,CAAC,GAAGb,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEtC;EACA,MAAMc,mBAAmB,GAAID,YAAY,IAAK;IAC5CD,mBAAmB,CAACC,YAAY,CAAC;EACnC,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAGX,aAAa,CAACY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACZ,IAAI,KAAKQ,YAAY,CAAC;EAE1F,oBACEV,OAAA;IAAAe,QAAA,GACGd,aAAa,CAACe,GAAG,CAAC,CAACF,QAAQ,EAAEG,KAAK,KACjCH,QAAQ,CAACX,IAAI,KAAK,QAAQ,iBACxBH,OAAA;MAAAe,QAAA,eACEf,OAAA;QAAAe,QAAA,eACEf,OAAA,CAACJ,IAAI;UAACsB,EAAE,EAAE,SAASJ,QAAQ,CAACZ,IAAI,EAAG;UAACiB,OAAO,EAAEA,CAAA,KAAMR,mBAAmB,CAACG,QAAQ,CAACZ,IAAI,CAAE;UAAAa,QAAA,EACnFD,QAAQ,CAACZ;QAAI;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC,GALGN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CAER,CAAC,eAEFvB,OAAA,CAACF,IAAI;MAACc,mBAAmB,EAAEA;IAAoB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAAChB,EAAA,CA7BID,QAAQ;EAAA,QAEaT,SAAS;AAAA;AAAA2B,EAAA,GAF9BlB,QAAQ;AA+Bd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}